@import "rgb-kind";

@mixin position-around-image($src) {
  position: relative;
  
  &:before {
    content: "";
    display: block;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    background-image: url($src);
    background-size: cover;
    background-repeat: no-repeat;
  }
}

@mixin cover-label($color: white) {

  label {
    color: opacify($color, 1);
    opacity: alpha($color);
    
    &:before {
      @include rgb-kind(background-color, rgba(invert($color), 0.25));
    }
    
    &:before, 
    &:after {
      color: inherit;
    }
    
    &:hover {
      opacity: 1;
    }
  }
}

@mixin cover-label-layout($size: 7em, $area: 100% 100%, $cover-duration: 0.15s) {
  label {
    min-width: $size;
    min-height: $size;
    
    width: nth($area, 1);
    height: nth($area, 2);
    text-indent: -100%;
    direction: ltr;
    display: inline-block;
    position: relative;
    
    $shade-fill: rgba(black, 0.25); 
    $thin: 0.01875em;
    $medium: 0.0375em;
    $thick: 0.05em;

    &:before,
    &:after {
      font-size: 7rem;
      content: "";
      display: inline-block;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate3d(-50%, -50%, 0);
      transition: border $cover-duration ease, box-shadow $cover-duration ease;
    }

    &:after {
      width: 0;
      height: 0;
      border-top: 0.25em solid transparent;
      border-bottom: 0.25em solid transparent;
      border-left: 0.42em solid;
      border-right: 0 solid transparent;
      margin-left: 0.05em;
    }

    &:before {
      box-sizing: border-box;
      height: 1em;
      width: 1em;
      border-radius: 0.5em;
      @include rgb-kind(background-color, $shade-fill);
      border: ($thick * 2) solid transparent;
      box-shadow: 
        inset 0 0 0 $thin,
        0 0 0 $thick,
        0 0 $medium $thin $shade-fill;
      
      margin-right: -0.75em;
      margin-bottom: -0.25em;
    }

    &:hover {
      &:before {
        border-width: $thick;
        box-shadow: 
          inset 0 0 0 $thick,
          0 0 0 $thin,
          0 0 $medium $thin $shade-fill;
      }
    }
  }
}

//TODO: make everything nice below

@mixin void-9-slice($slice: 1) {
  $offsets: (
    0 auto auto 0, 0 auto auto auto, 0 0 auto auto, 
    auto auto auto 0, auto, auto 0 auto auto, 
    auto auto 0 0, auto auto 0 auto, auto 0 0 auto);
  $offset-matrix: (1 2 3 1 2 3 1 2 3);
  $y-offsets: (margin-top, margin-bottom);
  $y-matrix: (1 1 1 2 2 2 3 3 3);
  
  margin: nth($offsets, $slice);
}

@mixin cover-interest($point: 50% 50%, $debug: 0) {

  &:before {
    background-position: $point;
  }
  
  @if $debug > 0 {
    &:before {
      opacity: 0.5;
    }
    
    background: linear-gradient(0, magenta, magenta), linear-gradient(0, magenta, magenta);
    background-size: 1px 1px;
    background-repeat: repeat-x, repeat-y;
    background-position: $point;
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function basis-length ($basis, $length) {
  @return $basis - $basis * strip-units($length / 100);
}

@function mod2 ($m, $n, $o: 1) {
  @return (($m - $o) % $n) + $o;
}

@mixin align-flex-slice($slice) {
  $options: flex-start, center, flex-end;
  align-self: nth($options, mod2($slice, length($options)));
}

@function aligned-basis-length ($direction, $alignment, $basis, $area-length) {
  $align-index: 1;

  @if $direction == 1 { //row
    $align-index: ceil($alignment/3);
  } @else { //column
    $align-index: mod2($alignment, 3);
  }

  $align-factors: (0, 0, -1);
  $aligned-basis: $basis * nth($align-factors, $align-index);
  @return abs($aligned-basis + ($basis * strip-units($area-length / 100)));
}

@mixin cover-items-around($area: 100% 25em, $point: 50% 50%, $direction: row, $items: ()) {
  $directions: ( row, column);
  $directional-length: ( min-width, min-height);
  $directional-offset-names: ( margin-top, margin-bottom);

  $options: flex-start, center, flex-end;
  $point-basis: nth($point, index($directions, $direction));
  $area-basis: nth($area, index($directions, $direction));
  $length-name: nth($directional-length, index($directions, $direction));

  $opposite-directions: ( column, row);
  $opposite-point-basis: nth($point, index($opposite-directions, $direction));
  $opposite-area-basis: nth($area, index($opposite-directions, $direction));

  $opposite-length-name: nth($directional-length, index($opposite-directions, $direction));

  $length: length($items);

  display: flex;
  flex-direction: $direction;
  justify-content: space-between;

  @if $length > 0 {
    > :nth-child(1) {

      $align-index: nth($items, 1);

      @include align-flex-slice($align-index);

      what: $length-name;

      #{$length-name}: aligned-basis-length(index($opposite-directions, $direction), $align-index, $area-basis, $point-basis);

      direction: index($opposite-directions, $direction);
      align-index: nth($items, 1);
      opposite-area-basis: $opposite-area-basis;
      opposite-point-basis: $opposite-point-basis;

      #{$opposite-length-name}: aligned-basis-length(index($directions, $direction), $align-index, $opposite-area-basis, $opposite-point-basis);

      @include void-9-slice($align-index);

    }
  }

  @if $length > 2  {
    > :nth-child(2) {
      $align-index: nth($items, 2);

      @include void-9-slice($align-index);
      @include align-flex-slice(nth($items, 2));
    }
  }

  > :nth-child(#{$length}) {
    $align-index: nth($items, $length);

    @include align-flex-slice($align-index);

    @include void-9-slice($align-index);

    align-index: nth($items, $length);

    #{$length-name}: aligned-basis-length(index($opposite-directions, $direction), $align-index, $area-basis, $point-basis);
    #{$opposite-length-name}: aligned-basis-length(index($opposite-directions, $direction), $align-index, $opposite-area-basis, $opposite-point-basis);
  }
}


@mixin position-around($area: 100% 20em, $point: 50% 50%, $direction: row, $items: (), $debug: 0) {
  margin: 0;
  //max-height: 100vh;
  max-width: nth($area, 1);
  min-height: nth($area, 2);
  @include cover-interest($point, $debug);
  @include cover-items-around($area, $point, $direction, $items);
}


@mixin interest-9-slice($slice: 1) {
  $alignments: (flex-start, center, flex-end);
  $alignment-matrix: (1 1 1 2 2 2 3 3 3);
  $justify-matrix: (1 2 3 1 2 3 1 2 3);
  
  justify-content: nth($alignments, nth($justify-matrix, $slice));;
  align-items: nth($alignments, nth($alignment-matrix, $slice));
}
