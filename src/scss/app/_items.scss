@mixin point-to-nine_items($area: 100% 25em, $point: 50% 50%, $direction: row, $items: ()) {
  $directions: ( row, column);
  $directional-length: ( min-width, min-height);
  $options: flex-start, center, flex-end;
  $point-basis: nth($point, index($directions, $direction));
  $area-basis: nth($area, index($directions, $direction));
  $length-name: nth($directional-length, index($directions, $direction));
  $opposite-directions: ( column, row);
  $opposite-point-basis: nth($point, index($opposite-directions, $direction));
  $opposite-area-basis: nth($area, index($opposite-directions, $direction));
  $opposite-length-name: nth($directional-length, index($opposite-directions, $direction));
  $length: length($items);

  display: flex;
  flex-direction: $direction;
  justify-content: space-between;

  @for $i from 1 through $length {
    > :nth-child(#{$i}) {
      $align-index: nth($items, $i);
      @include point-to-nine_slice-align($align-index);
      @include point-to-nine_slice-margin($align-index);

      $anchor: false;

      @if $i == 1 {
        $anchor: true;
      } @else if $i == $length {
        $anchor: true;
      }

      @if anchor {
        #{$length-name}: point-to-nine_slice-align--length(index($opposite-directions, $direction), $align-index, $area-basis, $point-basis);
        #{$opposite-length-name}: point-to-nine_slice-align--length(index($directions, $direction), $align-index, $opposite-area-basis, $opposite-point-basis);
      }
    }
  }
}
